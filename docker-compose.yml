version: '2'
services:
  db:
    image: postgres:12.1
    volumes:
      - ./postgres-data:/var/lib/postgresql
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_PASSWORD=superpassword
      - POSTGRES_USER=automation
      - POSTGRES_DB=automation_development
    ports:
      - "3317:5432"
    networks:
      net1:
        aliases:
          - db
  web:
    image: 252636471646.dkr.ecr.us-east-2.amazonaws.com/automation-web:latest
    networks:
      net1:
        aliases:
          - web
    ports:
      - 3001:3001
    mem_reservation: 256m
  rabbitmq:
    image: 'rabbitmq:3'
    networks:
      net1:
        aliases:
          - rabbitmq
    ports:
      - "5672:5672"
  worker:
    image: worker:latest
    networks:
      net1:
        aliases:
          - rabbitmq
    depends_on:
      - influxdb
      - influxdbcli
      - rabbitmq
      - db
    links:
      - influxdb:influxdb
      - redis:redis
      - db:db
      - rabbitmq:rabbitmq
    environment:
      - BUNNY_AMQP_ADDRESSES=rabbitmq:5672
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_PORT=5432
      - POSTGRES_PASSWORD=superpassword
      - POSTGRES_USER=automation
      - POSTGRES_HOST=db
      - RAILS_ENV=development
      - BUNDLER_WITHOUT=production
      - WORKERS=TriggersCheckerWorker
  api:
    image: easyautomateme.jfrog.io/easyautomateme-docker/api:latest
    mem_reservation: 256m
    networks:
      net1:
        aliases:
          - api
    depends_on:
      - influxdb
      - influxdbcli
      - db
    links:
      - influxdb:influxdb
      - redis:redis
      - db:db
      - rabbitmq:rabbitmq
    volumes:
      - ./:/app
    environment:
      - BUNNY_AMQP_ADDRESSES=rabbitmq:5672
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_PORT=5432
      - POSTGRES_PASSWORD=superpassword
      - POSTGRES_USER=automation
      - POSTGRES_HOST=db
      - INFLUX_HOST=http://influxdb:8086
      - INFLUX_BUCKET=mybucket
      - INFLUX_ORG=myorg
      - INFLUX_TOKEN=mytoken
      - REDIS_PASSWORD=superpassword
      - REDIS_HOST=redis
      - RAILS_ENV=development
      - BUNDLER_WITHOUT=production
    ports:
      - 3000:3000
    command: bundle exec rails s

  influxdb:
    image: quay.io/influxdb/influxdb:v2.0.3
    mem_reservation: 256m
    volumes:
      - ./tmp/influx:/.influxdbv2
    ports:
      - 8086:8086
    networks:
      net1:
        aliases:
          - influxdb
  # Use the influx cli to set up an influxdb instance.
  influxdbcli:
    links:
      - influxdb
    image: quay.io/influxdb/influxdb:v2.0.3
    # Use these same configurations parameters in your telegraf configuration, mytelegraf.conf.
    entrypoint: influx setup --bucket mybucket -t mytoken -o myorg --username=myusername --password=password --host=http://influxdb:8086 -f
    # Wait for the influxd service in the influxdb container has fully bootstrapped before trying to setup an influxdb instance with the influxdb_cli service.
    restart: on-failure:10
    depends_on:
      - influxdb
    networks:
      net1:
        aliases:
          - influxdbcli
  redis:
    image: 252636471646.dkr.ecr.us-east-2.amazonaws.com/automation-redis:latest
    mem_reservation: 256m
    environment:
      - REDIS_PASSWORD=superpassword
    volumes:
      - ./tmp/redis:/bitnami/redis/data
    networks:
      net1:
        aliases:
          - redis

  nginx:
    image: 252636471646.dkr.ecr.us-east-2.amazonaws.com/automation-proxy:latest
    mem_reservation: 16m
    networks:
      net1:
        aliases:
          - nginx
    ports:
      - 80:80
      - 443:443
    links:
      - api
      - web

networks:
  net1:
